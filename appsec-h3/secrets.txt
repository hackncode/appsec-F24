Steps to Secure Secrets:
Identify Secret Usage: Initially, I identified where sensitive data, such as database credentials and the Django SECRET_KEY, were being used in the Kubernetes deployment. I found that the database username and password were hardcoded in the Kubernetes YAML file, and the SECRET_KEY was directly included in the settings.py file of the Django application.

Create Kubernetes Secrets: Next, I created Kubernetes secrets to securely store the database username, password, and SECRET_KEY by running the following command:
kubectl create secret opaque giftcard-app-secrets \
--from-literal=db_name=<db_username> \
--from-literal=db_password=<db_password> \
--from-literal=app_secret=<db_username>
This command generates an opaque secret named "giftcard-app-secrets," with keys for db_name, db_password, and app_secret set to the corresponding values.

Modify Kubernetes YAML Files: I then updated the Kubernetes YAML files to reference the newly created secrets instead of hardcoding the database credentials. Here is an example of how I updated the deployment YAML:

Update settings.py: Afterward, I modified the settings.py file to use environment variables for the database credentials and the SECRET_KEY rather than hardcoded values.

Alternative Secret Initialization via YAML: Alternatively, I created a YAML file to define the giftcard-app-secrets secret. This YAML file should be excluded from the Git repository by adding it to .gitignore to prevent secrets from being exposed in production. To ensure this file is not included in the Docker build context, I also added it to the .dockerignore file. This prevents sensitive files from being included in the Docker image.
